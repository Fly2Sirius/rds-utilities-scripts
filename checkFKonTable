#!/usr/bin/env python3
import sys
import string
import random
import requests
import json
import funcs as f
import colorama
from colorama import Fore

if len(sys.argv) > 1:
    table_name = sys.argv[1]
    #if sys.argv[2] is not None: 
        #schema_name = sys.argv[2]
    try:
        schema_name = sys.argv[2]      
    except IndexError:
        print(Fore.CYAN + "No Schema specified, deafaulting to optimus!" + Fore.RESET)
        schema_name = 'optimus'
    
else:
    print('You must supply at least a table name: checkFKonTable table_name [schema_name]')
    sys.exit()

#mysql_host = 'production.civpyhkigzas.us-east-1.rds.amazonaws.com'
#mysql_host = 'reader-bi.civpyhkigzas.us-east-1.rds.amazonaws.com'
mysql_user,mysql_password = f.get_mysql_credentials()
mysql_host = '127.0.0.1'
mysql_user='lendio'
mysql_password='L3nd10'
connection = f.create_connection(mysql_host, mysql_user, mysql_password,9900)
cursor = connection.cursor()

get_fk_info = f"(SELECT \
constraint_schema `Constraint_Schema`, \
constraint_name `Constraint_Name`, \
table_schema `Source_Schema`, \
table_name `Source_Table`, \
column_name `Source_Column`, \
referenced_table_schema `Referenced_Schema`, \
referenced_table_name `Referenced_Table`, \
referenced_column_name `Referenced_Column` \
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \
WHERE \
table_schema = '{schema_name}' \
AND table_name = '{table_name}' \
AND referenced_table_name != 'counties' \
AND referenced_column_name IS NOT NULL) \
UNION \
(SELECT \
    constraint_schema `Constraint_Schema`, \
    constraint_name `Constraint_Name`, \
	table_schema `Source_Schema`, \
	table_name `Source_Table`, \
	column_name `Source_Column`, \
	referenced_table_schema `Referenced_Schema`, \
	referenced_table_name `Referenced_Table`, \
	referenced_column_name `Referenced_Column` \
FROM \
	INFORMATION_SCHEMA.KEY_COLUMN_USAGE \
WHERE \
	referenced_table_schema = '{schema_name}' \
	AND referenced_table_name = '{table_name}' \
    AND table_name != 'counties');"

cursor.execute(get_fk_info)
columns = cursor.description 
foreign_key_data = [{columns[index][0]:column for index, column in enumerate(value)} for value in cursor.fetchall()]
print(Fore.YELLOW + f"Total number of constraints in {schema_name}.{table_name}: {cursor.rowcount}" + Fore.RESET )
#print(foreign_key_data)
for value in foreign_key_data:
    get_orphaned_count = f"select count(1) as orphaned_values,group_concat(DISTINCT a.{value['Source_Column']} ORDER BY a.{value['Source_Column']} ) from {value['Source_Schema']}.{value['Source_Table']} a \
		left join {value['Referenced_Schema']}.{value['Referenced_Table']} b on a.{value['Source_Column']} = b.{value['Referenced_Column']} \
		where a.{value['Source_Column']} is NOT NULL \
		and b.{value['Referenced_Column']} is NULL;"
    #print(get_orphaned_count)
    cursor.execute(get_orphaned_count)
    count = cursor.fetchall()
    print(f"{value['Constraint_Schema']}.{value['Constraint_Name']} : ", end="")
    if count[0][0] > 0:
        print(Fore.RED + f"{count[0][0]}")
        print(f"{value['Source_Schema']}.{value['Source_Table']}.{value['Source_Column']}  doesn't exist in -> {value['Referenced_Schema']}.{value['Referenced_Table']}.{value['Referenced_Column']} ")
        print(f"** {value['Referenced_Column']} that do not exist in {value['Referenced_Schema']}.{value['Referenced_Table']} : ({count[0][1]})")
        print(Fore.RESET, end="")
    else :
        print(Fore.GREEN + "Good")
        print(Fore.RESET, end="")